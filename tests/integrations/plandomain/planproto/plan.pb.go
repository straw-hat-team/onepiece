// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: planproto/plan.proto

package planproto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*Command_CreatePlan
	//	*Command_ArchivePlan
	//	*Command_UpdatePlan
	//	*Command_DrainPlan
	//	*Command_FailDrainPlan
	Command isCommand_Command `protobuf_oneof:"command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{0}
}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *Command) GetCreatePlan() *CreatePlan {
	if x, ok := x.GetCommand().(*Command_CreatePlan); ok {
		return x.CreatePlan
	}
	return nil
}

func (x *Command) GetArchivePlan() *ArchivePlan {
	if x, ok := x.GetCommand().(*Command_ArchivePlan); ok {
		return x.ArchivePlan
	}
	return nil
}

func (x *Command) GetUpdatePlan() *UpdatePlan {
	if x, ok := x.GetCommand().(*Command_UpdatePlan); ok {
		return x.UpdatePlan
	}
	return nil
}

func (x *Command) GetDrainPlan() *DrainPlan {
	if x, ok := x.GetCommand().(*Command_DrainPlan); ok {
		return x.DrainPlan
	}
	return nil
}

func (x *Command) GetFailDrainPlan() *FailDrainPlan {
	if x, ok := x.GetCommand().(*Command_FailDrainPlan); ok {
		return x.FailDrainPlan
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_CreatePlan struct {
	CreatePlan *CreatePlan `protobuf:"bytes,2,opt,name=createPlan,proto3,oneof"`
}

type Command_ArchivePlan struct {
	ArchivePlan *ArchivePlan `protobuf:"bytes,3,opt,name=archivePlan,proto3,oneof"`
}

type Command_UpdatePlan struct {
	UpdatePlan *UpdatePlan `protobuf:"bytes,4,opt,name=updatePlan,proto3,oneof"`
}

type Command_DrainPlan struct {
	DrainPlan *DrainPlan `protobuf:"bytes,5,opt,name=drainPlan,proto3,oneof"`
}

type Command_FailDrainPlan struct {
	FailDrainPlan *FailDrainPlan `protobuf:"bytes,6,opt,name=failDrainPlan,proto3,oneof"`
}

func (*Command_CreatePlan) isCommand_Command() {}

func (*Command_ArchivePlan) isCommand_Command() {}

func (*Command_UpdatePlan) isCommand_Command() {}

func (*Command_DrainPlan) isCommand_Command() {}

func (*Command_FailDrainPlan) isCommand_Command() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context map[string]string `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Event:
	//
	//	*Event_PlanCreated
	//	*Event_PlanUpdated
	//	*Event_PlanArchived
	//	*Event_PlanDrained
	//	*Event_PlanDrainFailed
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetPlanCreated() *PlanCreated {
	if x, ok := x.GetEvent().(*Event_PlanCreated); ok {
		return x.PlanCreated
	}
	return nil
}

func (x *Event) GetPlanUpdated() *PlanUpdated {
	if x, ok := x.GetEvent().(*Event_PlanUpdated); ok {
		return x.PlanUpdated
	}
	return nil
}

func (x *Event) GetPlanArchived() *PlanArchived {
	if x, ok := x.GetEvent().(*Event_PlanArchived); ok {
		return x.PlanArchived
	}
	return nil
}

func (x *Event) GetPlanDrained() *PlanDrained {
	if x, ok := x.GetEvent().(*Event_PlanDrained); ok {
		return x.PlanDrained
	}
	return nil
}

func (x *Event) GetPlanDrainFailed() *PlanDrainFailed {
	if x, ok := x.GetEvent().(*Event_PlanDrainFailed); ok {
		return x.PlanDrainFailed
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_PlanCreated struct {
	PlanCreated *PlanCreated `protobuf:"bytes,2,opt,name=planCreated,proto3,oneof"`
}

type Event_PlanUpdated struct {
	PlanUpdated *PlanUpdated `protobuf:"bytes,3,opt,name=planUpdated,proto3,oneof"`
}

type Event_PlanArchived struct {
	PlanArchived *PlanArchived `protobuf:"bytes,4,opt,name=planArchived,proto3,oneof"`
}

type Event_PlanDrained struct {
	PlanDrained *PlanDrained `protobuf:"bytes,5,opt,name=planDrained,proto3,oneof"`
}

type Event_PlanDrainFailed struct {
	PlanDrainFailed *PlanDrainFailed `protobuf:"bytes,6,opt,name=planDrainFailed,proto3,oneof"`
}

func (*Event_PlanCreated) isEvent_Event() {}

func (*Event_PlanUpdated) isEvent_Event() {}

func (*Event_PlanArchived) isEvent_Event() {}

func (*Event_PlanDrained) isEvent_Event() {}

func (*Event_PlanDrainFailed) isEvent_Event() {}

type FailDrainPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	TransferId string               `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	FailedAt   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=failedAt,proto3" json:"failedAt,omitempty"`
	Context    map[string]string    `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FailDrainPlan) Reset() {
	*x = FailDrainPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailDrainPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailDrainPlan) ProtoMessage() {}

func (x *FailDrainPlan) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailDrainPlan.ProtoReflect.Descriptor instead.
func (*FailDrainPlan) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{2}
}

func (x *FailDrainPlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *FailDrainPlan) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FailDrainPlan) GetFailedAt() *timestamp.Timestamp {
	if x != nil {
		return x.FailedAt
	}
	return nil
}

func (x *FailDrainPlan) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type DrainPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	TransferId string               `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	DrainedAt  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=drainedAt,proto3" json:"drainedAt,omitempty"`
	Context    map[string]string    `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DrainPlan) Reset() {
	*x = DrainPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainPlan) ProtoMessage() {}

func (x *DrainPlan) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainPlan.ProtoReflect.Descriptor instead.
func (*DrainPlan) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{3}
}

func (x *DrainPlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *DrainPlan) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *DrainPlan) GetDrainedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DrainedAt
	}
	return nil
}

func (x *DrainPlan) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId      string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	Title       string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Color       string               `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	GoalAmount  *Amount              `protobuf:"bytes,4,opt,name=goalAmount,proto3" json:"goalAmount,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon        string               `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Context     map[string]string    `protobuf:"bytes,8,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdatePlan) Reset() {
	*x = UpdatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlan) ProtoMessage() {}

func (x *UpdatePlan) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlan.ProtoReflect.Descriptor instead.
func (*UpdatePlan) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *UpdatePlan) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePlan) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *UpdatePlan) GetGoalAmount() *Amount {
	if x != nil {
		return x.GoalAmount
	}
	return nil
}

func (x *UpdatePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePlan) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdatePlan) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdatePlan) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type ArchivePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	ArchivedBy string               `protobuf:"bytes,2,opt,name=archivedBy,proto3" json:"archivedBy,omitempty"`
	ArchivedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=archivedAt,proto3" json:"archivedAt,omitempty"`
	Context    map[string]string    `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArchivePlan) Reset() {
	*x = ArchivePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchivePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivePlan) ProtoMessage() {}

func (x *ArchivePlan) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivePlan.ProtoReflect.Descriptor instead.
func (*ArchivePlan) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{5}
}

func (x *ArchivePlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *ArchivePlan) GetArchivedBy() string {
	if x != nil {
		return x.ArchivedBy
	}
	return ""
}

func (x *ArchivePlan) GetArchivedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ArchivePlan) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type CreatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId           string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	Title            string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Color            string               `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	GoalAmount       *Amount              `protobuf:"bytes,4,opt,name=goalAmount,proto3" json:"goalAmount,omitempty"`
	Description      string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon             string               `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DepositAccountId string               `protobuf:"bytes,8,opt,name=depositAccountId,proto3" json:"depositAccountId,omitempty"`
	Context          map[string]string    `protobuf:"bytes,9,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreatePlan) Reset() {
	*x = CreatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlan) ProtoMessage() {}

func (x *CreatePlan) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlan.ProtoReflect.Descriptor instead.
func (*CreatePlan) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CreatePlan) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlan) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CreatePlan) GetGoalAmount() *Amount {
	if x != nil {
		return x.GoalAmount
	}
	return nil
}

func (x *CreatePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlan) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreatePlan) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreatePlan) GetDepositAccountId() string {
	if x != nil {
		return x.DepositAccountId
	}
	return ""
}

func (x *CreatePlan) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denomination string `protobuf:"bytes,2,opt,name=denomination,proto3" json:"denomination,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{7}
}

func (x *Amount) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Amount) GetDenomination() string {
	if x != nil {
		return x.Denomination
	}
	return ""
}

type PlanCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId           string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	Title            string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Color            string               `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	GoalAmount       *Amount              `protobuf:"bytes,4,opt,name=goalAmount,proto3" json:"goalAmount,omitempty"`
	Description      string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon             string               `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DepositAccountId string               `protobuf:"bytes,8,opt,name=depositAccountId,proto3" json:"depositAccountId,omitempty"`
}

func (x *PlanCreated) Reset() {
	*x = PlanCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCreated) ProtoMessage() {}

func (x *PlanCreated) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCreated.ProtoReflect.Descriptor instead.
func (*PlanCreated) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{8}
}

func (x *PlanCreated) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanCreated) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanCreated) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *PlanCreated) GetGoalAmount() *Amount {
	if x != nil {
		return x.GoalAmount
	}
	return nil
}

func (x *PlanCreated) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanCreated) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PlanCreated) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlanCreated) GetDepositAccountId() string {
	if x != nil {
		return x.DepositAccountId
	}
	return ""
}

type PlanUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId      string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	Title       string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Color       string               `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	GoalAmount  *Amount              `protobuf:"bytes,4,opt,name=goalAmount,proto3" json:"goalAmount,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon        string               `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *PlanUpdated) Reset() {
	*x = PlanUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanUpdated) ProtoMessage() {}

func (x *PlanUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanUpdated.ProtoReflect.Descriptor instead.
func (*PlanUpdated) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{9}
}

func (x *PlanUpdated) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanUpdated) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanUpdated) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *PlanUpdated) GetGoalAmount() *Amount {
	if x != nil {
		return x.GoalAmount
	}
	return nil
}

func (x *PlanUpdated) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanUpdated) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PlanUpdated) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type PlanArchived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	ArchivedBy string               `protobuf:"bytes,2,opt,name=archivedBy,proto3" json:"archivedBy,omitempty"`
	ArchivedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=archivedAt,proto3" json:"archivedAt,omitempty"`
}

func (x *PlanArchived) Reset() {
	*x = PlanArchived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanArchived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanArchived) ProtoMessage() {}

func (x *PlanArchived) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanArchived.ProtoReflect.Descriptor instead.
func (*PlanArchived) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{10}
}

func (x *PlanArchived) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanArchived) GetArchivedBy() string {
	if x != nil {
		return x.ArchivedBy
	}
	return ""
}

func (x *PlanArchived) GetArchivedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

type PlanDrained struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	TransferId string               `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	DrainedAt  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=drainedAt,proto3" json:"drainedAt,omitempty"`
}

func (x *PlanDrained) Reset() {
	*x = PlanDrained{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDrained) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDrained) ProtoMessage() {}

func (x *PlanDrained) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDrained.ProtoReflect.Descriptor instead.
func (*PlanDrained) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{11}
}

func (x *PlanDrained) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanDrained) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *PlanDrained) GetDrainedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DrainedAt
	}
	return nil
}

type PlanDrainFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string               `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	TransferId string               `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	FailedAt   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=failedAt,proto3" json:"failedAt,omitempty"`
}

func (x *PlanDrainFailed) Reset() {
	*x = PlanDrainFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planproto_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDrainFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDrainFailed) ProtoMessage() {}

func (x *PlanDrainFailed) ProtoReflect() protoreflect.Message {
	mi := &file_planproto_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDrainFailed.ProtoReflect.Descriptor instead.
func (*PlanDrainFailed) Descriptor() ([]byte, []int) {
	return file_planproto_plan_proto_rawDescGZIP(), []int{12}
}

func (x *PlanDrainFailed) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanDrainFailed) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *PlanDrainFailed) GetFailedAt() *timestamp.Timestamp {
	if x != nil {
		return x.FailedAt
	}
	return nil
}

var File_planproto_plan_proto protoreflect.FileDescriptor

var file_planproto_plan_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72,
	0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x48, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64,
	0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x45, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64,
	0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x72,
	0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x44,
	0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xa6, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x57, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x72,
	0x61, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8d,
	0x02, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65,
	0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87,
	0x02, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x67,
	0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x03, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a,
	0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65,
	0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1,
	0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6d, 0x62,
	0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a,
	0x67, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x7f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x81, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x90, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x72, 0x61, 0x77, 0x2d, 0x68, 0x61, 0x74, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x6f, 0x6e, 0x65, 0x70, 0x69, 0x65, 0x63, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x04,
	0x43, 0x48, 0x44, 0x50, 0xaa, 0x02, 0x1a, 0x43, 0x6f, 0x6d, 0x2e, 0x48, 0x6d, 0x62, 0x72, 0x61,
	0x64, 0x6c, 0x65, 0x79, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6d, 0x5c, 0x48, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65,
	0x79, 0x5c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0xe2, 0x02,
	0x26, 0x43, 0x6f, 0x6d, 0x5c, 0x48, 0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x5c, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x48,
	0x6d, 0x62, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x79, 0x3a, 0x3a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_planproto_plan_proto_rawDescOnce sync.Once
	file_planproto_plan_proto_rawDescData = file_planproto_plan_proto_rawDesc
)

func file_planproto_plan_proto_rawDescGZIP() []byte {
	file_planproto_plan_proto_rawDescOnce.Do(func() {
		file_planproto_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_planproto_plan_proto_rawDescData)
	})
	return file_planproto_plan_proto_rawDescData
}

var file_planproto_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_planproto_plan_proto_goTypes = []interface{}{
	(*Command)(nil),             // 0: com.hmbradley.deposit.plan.Command
	(*Event)(nil),               // 1: com.hmbradley.deposit.plan.Event
	(*FailDrainPlan)(nil),       // 2: com.hmbradley.deposit.plan.FailDrainPlan
	(*DrainPlan)(nil),           // 3: com.hmbradley.deposit.plan.DrainPlan
	(*UpdatePlan)(nil),          // 4: com.hmbradley.deposit.plan.UpdatePlan
	(*ArchivePlan)(nil),         // 5: com.hmbradley.deposit.plan.ArchivePlan
	(*CreatePlan)(nil),          // 6: com.hmbradley.deposit.plan.CreatePlan
	(*Amount)(nil),              // 7: com.hmbradley.deposit.plan.Amount
	(*PlanCreated)(nil),         // 8: com.hmbradley.deposit.plan.PlanCreated
	(*PlanUpdated)(nil),         // 9: com.hmbradley.deposit.plan.PlanUpdated
	(*PlanArchived)(nil),        // 10: com.hmbradley.deposit.plan.PlanArchived
	(*PlanDrained)(nil),         // 11: com.hmbradley.deposit.plan.PlanDrained
	(*PlanDrainFailed)(nil),     // 12: com.hmbradley.deposit.plan.PlanDrainFailed
	nil,                         // 13: com.hmbradley.deposit.plan.Event.ContextEntry
	nil,                         // 14: com.hmbradley.deposit.plan.FailDrainPlan.ContextEntry
	nil,                         // 15: com.hmbradley.deposit.plan.DrainPlan.ContextEntry
	nil,                         // 16: com.hmbradley.deposit.plan.UpdatePlan.ContextEntry
	nil,                         // 17: com.hmbradley.deposit.plan.ArchivePlan.ContextEntry
	nil,                         // 18: com.hmbradley.deposit.plan.CreatePlan.ContextEntry
	(*timestamp.Timestamp)(nil), // 19: google.protobuf.Timestamp
}
var file_planproto_plan_proto_depIdxs = []int32{
	6,  // 0: com.hmbradley.deposit.plan.Command.createPlan:type_name -> com.hmbradley.deposit.plan.CreatePlan
	5,  // 1: com.hmbradley.deposit.plan.Command.archivePlan:type_name -> com.hmbradley.deposit.plan.ArchivePlan
	4,  // 2: com.hmbradley.deposit.plan.Command.updatePlan:type_name -> com.hmbradley.deposit.plan.UpdatePlan
	3,  // 3: com.hmbradley.deposit.plan.Command.drainPlan:type_name -> com.hmbradley.deposit.plan.DrainPlan
	2,  // 4: com.hmbradley.deposit.plan.Command.failDrainPlan:type_name -> com.hmbradley.deposit.plan.FailDrainPlan
	13, // 5: com.hmbradley.deposit.plan.Event.context:type_name -> com.hmbradley.deposit.plan.Event.ContextEntry
	8,  // 6: com.hmbradley.deposit.plan.Event.planCreated:type_name -> com.hmbradley.deposit.plan.PlanCreated
	9,  // 7: com.hmbradley.deposit.plan.Event.planUpdated:type_name -> com.hmbradley.deposit.plan.PlanUpdated
	10, // 8: com.hmbradley.deposit.plan.Event.planArchived:type_name -> com.hmbradley.deposit.plan.PlanArchived
	11, // 9: com.hmbradley.deposit.plan.Event.planDrained:type_name -> com.hmbradley.deposit.plan.PlanDrained
	12, // 10: com.hmbradley.deposit.plan.Event.planDrainFailed:type_name -> com.hmbradley.deposit.plan.PlanDrainFailed
	19, // 11: com.hmbradley.deposit.plan.FailDrainPlan.failedAt:type_name -> google.protobuf.Timestamp
	14, // 12: com.hmbradley.deposit.plan.FailDrainPlan.context:type_name -> com.hmbradley.deposit.plan.FailDrainPlan.ContextEntry
	19, // 13: com.hmbradley.deposit.plan.DrainPlan.drainedAt:type_name -> google.protobuf.Timestamp
	15, // 14: com.hmbradley.deposit.plan.DrainPlan.context:type_name -> com.hmbradley.deposit.plan.DrainPlan.ContextEntry
	7,  // 15: com.hmbradley.deposit.plan.UpdatePlan.goalAmount:type_name -> com.hmbradley.deposit.plan.Amount
	19, // 16: com.hmbradley.deposit.plan.UpdatePlan.updatedAt:type_name -> google.protobuf.Timestamp
	16, // 17: com.hmbradley.deposit.plan.UpdatePlan.context:type_name -> com.hmbradley.deposit.plan.UpdatePlan.ContextEntry
	19, // 18: com.hmbradley.deposit.plan.ArchivePlan.archivedAt:type_name -> google.protobuf.Timestamp
	17, // 19: com.hmbradley.deposit.plan.ArchivePlan.context:type_name -> com.hmbradley.deposit.plan.ArchivePlan.ContextEntry
	7,  // 20: com.hmbradley.deposit.plan.CreatePlan.goalAmount:type_name -> com.hmbradley.deposit.plan.Amount
	19, // 21: com.hmbradley.deposit.plan.CreatePlan.createdAt:type_name -> google.protobuf.Timestamp
	18, // 22: com.hmbradley.deposit.plan.CreatePlan.context:type_name -> com.hmbradley.deposit.plan.CreatePlan.ContextEntry
	7,  // 23: com.hmbradley.deposit.plan.PlanCreated.goalAmount:type_name -> com.hmbradley.deposit.plan.Amount
	19, // 24: com.hmbradley.deposit.plan.PlanCreated.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 25: com.hmbradley.deposit.plan.PlanUpdated.goalAmount:type_name -> com.hmbradley.deposit.plan.Amount
	19, // 26: com.hmbradley.deposit.plan.PlanUpdated.updatedAt:type_name -> google.protobuf.Timestamp
	19, // 27: com.hmbradley.deposit.plan.PlanArchived.archivedAt:type_name -> google.protobuf.Timestamp
	19, // 28: com.hmbradley.deposit.plan.PlanDrained.drainedAt:type_name -> google.protobuf.Timestamp
	19, // 29: com.hmbradley.deposit.plan.PlanDrainFailed.failedAt:type_name -> google.protobuf.Timestamp
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_planproto_plan_proto_init() }
func file_planproto_plan_proto_init() {
	if File_planproto_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_planproto_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailDrainPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchivePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanArchived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDrained); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planproto_plan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDrainFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_planproto_plan_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Command_CreatePlan)(nil),
		(*Command_ArchivePlan)(nil),
		(*Command_UpdatePlan)(nil),
		(*Command_DrainPlan)(nil),
		(*Command_FailDrainPlan)(nil),
	}
	file_planproto_plan_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Event_PlanCreated)(nil),
		(*Event_PlanUpdated)(nil),
		(*Event_PlanArchived)(nil),
		(*Event_PlanDrained)(nil),
		(*Event_PlanDrainFailed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_planproto_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_planproto_plan_proto_goTypes,
		DependencyIndexes: file_planproto_plan_proto_depIdxs,
		MessageInfos:      file_planproto_plan_proto_msgTypes,
	}.Build()
	File_planproto_plan_proto = out.File
	file_planproto_plan_proto_rawDesc = nil
	file_planproto_plan_proto_goTypes = nil
	file_planproto_plan_proto_depIdxs = nil
}
